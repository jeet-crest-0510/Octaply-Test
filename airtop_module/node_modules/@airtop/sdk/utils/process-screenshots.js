"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processScreenshots = processScreenshots;
function extractMimeAndBase64(dataUrl) {
    const match = dataUrl.match(/^data:(image\/\w+);base64,(.+)$/);
    if (match) {
        return { mimeType: match[1], base64Data: match[2] };
    }
    return {
        mimeType: 'image/jpeg',
        base64Data: dataUrl.replace(/^data:image\/jpeg;base64,/, ''),
    };
}
function processScreenshots(response) {
    return __awaiter(this, void 0, void 0, function* () {
        const screenshots = response.meta.screenshots;
        if (!screenshots) {
            return [];
        }
        const processedScreenshots = screenshots.map((screenshot, index) => {
            if (!screenshot.dataUrl) {
                return {
                    index,
                    error: new Error('Screenshot data URL not found'),
                    success: false,
                };
            }
            try {
                const { mimeType, base64Data } = extractMimeAndBase64(screenshot.dataUrl);
                const binaryData = Buffer.from(base64Data, 'base64');
                return {
                    index,
                    binaryData,
                    mimeType,
                    success: true,
                };
            }
            catch (err) {
                console.error(`Error processing screenshot ${index}:`, err);
                return {
                    index,
                    error: err instanceof Error ? err : new Error(String(err)),
                    success: false,
                };
            }
        });
        return processedScreenshots;
    });
}
