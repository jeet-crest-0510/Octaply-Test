"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadFileAndSelectInput = uploadFileAndSelectInput;
const path_1 = __importDefault(require("path"));
function uploadFileAndSelectInput(_a) {
    return __awaiter(this, arguments, void 0, function* ({ client, sessionId, windowId, configuration, }) {
        var _b;
        const windowInfo = yield client.windows.getWindowInfo(sessionId, windowId);
        if (!windowInfo) {
            throw new Error('window not found');
        }
        client.log(`starting file upload: sessionId: ${sessionId}, windowId: ${windowId}, uploadFilePath: ${configuration.uploadFilePath}`);
        const fileUploadResponse = yield client.files.upload(configuration.uploadFilePath, {
            fileName: (_b = configuration.fileName) !== null && _b !== void 0 ? _b : path_1.default.basename(configuration.uploadFilePath),
        });
        if (fileUploadResponse.errors && fileUploadResponse.errors.length > 0) {
            client.log(`file upload failed: ${JSON.stringify(fileUploadResponse.errors)}`);
            throw new Error('file upload failed');
        }
        const fileId = fileUploadResponse.data.id;
        client.log(`file upload to cloud complete: file id: ${fileId}`);
        yield client.files.push(fileId, {
            sessionIds: [sessionId],
        });
        client.log('file pushed to session');
        client.log(`waiting for file upload to become available ${fileId}`);
        const waitResult = yield client.sessions.waitForUploadAvailable(sessionId, fileId);
        if (waitResult) {
            client.log('file upload available');
        }
        else {
            client.log('file upload not available within timeout');
            throw new Error('file upload not available within timeout');
        }
        client.log(`executing file input interaction ${JSON.stringify(configuration)}`);
        const fileInputResponse = yield client.windows.fileInput(sessionId, windowId, Object.assign({ fileId: fileId }, configuration));
        if (fileInputResponse.errors && fileInputResponse.errors.length > 0) {
            client.log(`file input failed: ${JSON.stringify(fileInputResponse.errors)}`);
            throw new Error('file input failed');
        }
        client.log('file upload and file input interaction complete');
        client.log(JSON.stringify(fileInputResponse, null, 2));
        return {
            fileId,
            aiResponse: fileInputResponse,
        };
    });
}
