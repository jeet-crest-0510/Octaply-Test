"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowQueue = void 0;
const async_mutex_1 = require("async-mutex");
class WindowQueue {
    constructor(maxWindowsPerSession, runEmitter, sessionId, client, operation, onError, isHalted = false) {
        this.activePromises = [];
        this.urlQueue = [];
        this.activePromisesMutex = new async_mutex_1.Mutex();
        this.urlQueueMutex = new async_mutex_1.Mutex();
        if (!Number.isInteger(maxWindowsPerSession) || maxWindowsPerSession <= 0) {
            throw new Error('maxWindowsPerSession must be a positive integer');
        }
        this.maxWindowsPerSession = maxWindowsPerSession;
        this.runEmitter = runEmitter;
        this.sessionId = sessionId;
        this.client = client;
        this.operation = operation;
        this.onError = onError;
        this.isHalted = isHalted;
    }
    addUrlToQueue(url) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.urlQueueMutex.runExclusive(() => {
                this.urlQueue.push(url);
            });
        });
    }
    handleHaltEvent() {
        this.client.log('Halt event received');
        this.isHalted = true;
    }
    processInBatches(urls) {
        return __awaiter(this, void 0, void 0, function* () {
            const results = [];
            this.runEmitter.on('halt', this.handleHaltEvent.bind(this));
            yield this.urlQueueMutex.runExclusive(() => {
                this.urlQueue = [...urls];
            });
            this.client.log(`Processing batch: ${JSON.stringify(urls)} for session ${this.sessionId}`);
            while (this.urlQueue.length > 0) {
                // Wait for any window to complete before starting a new one
                let shouldContinue = false;
                yield this.activePromisesMutex.runExclusive(() => __awaiter(this, void 0, void 0, function* () {
                    if (this.activePromises.length >= this.maxWindowsPerSession) {
                        yield Promise.race(this.activePromises);
                        shouldContinue = true;
                    }
                }));
                if (shouldContinue)
                    continue;
                let urlData;
                yield this.urlQueueMutex.runExclusive(() => {
                    urlData = this.urlQueue.shift(); // Take the next url from the queue
                });
                if (!urlData)
                    break; // No more urls to process
                // If we have less than the max concurrent operations, start a new one
                const promise = (() => __awaiter(this, void 0, void 0, function* () {
                    // Do not process any more urls if the processing has been halted
                    if (this.isHalted) {
                        this.client.log(`Processing halted, skipping window creation for ${urlData.url}`);
                        return;
                    }
                    let windowId;
                    let liveViewUrl;
                    try {
                        // Create a new window pointed to the url
                        this.client.log(`Creating window for ${urlData.url} in session ${this.sessionId}`);
                        const { data, errors, warnings } = yield this.client.windows.create(this.sessionId, {
                            url: urlData.url,
                        });
                        windowId = data.windowId;
                        this.handleErrorAndWarningResponses({
                            warnings,
                            errors,
                            sessionId: this.sessionId,
                            url: urlData,
                            operation: 'window creation',
                        });
                        if (!windowId) {
                            throw new Error(`WindowId not found, errors: ${JSON.stringify(errors)}`);
                        }
                        const { data: windowInfo, warnings: windowWarnings, errors: windowErrors, } = yield this.client.windows.getWindowInfo(this.sessionId, windowId);
                        liveViewUrl = windowInfo.liveViewUrl;
                        this.handleErrorAndWarningResponses({
                            warnings: windowWarnings,
                            errors: windowErrors,
                            sessionId: this.sessionId,
                            url: urlData,
                            operation: 'window info retrieval',
                        });
                        // Run the operation on the window
                        const result = yield this.operation({
                            windowId,
                            sessionId: this.sessionId,
                            liveViewUrl,
                            operationUrl: urlData,
                        });
                        if (result) {
                            const { shouldHaltBatch, additionalUrls, data } = result;
                            if (data) {
                                results.push(data);
                            }
                            if (shouldHaltBatch) {
                                this.client.log('Emitting halt event');
                                this.runEmitter.emit('halt');
                            }
                            if (additionalUrls && additionalUrls.length > 0) {
                                this.client.log(`Emitting addUrls event with urls: ${JSON.stringify(additionalUrls)}`);
                                this.runEmitter.emit('addUrls', additionalUrls);
                            }
                        }
                    }
                    catch (error) {
                        if (this.onError) {
                            yield this.handleErrorWithCallback({
                                originalError: error,
                                url: urlData,
                                callback: this.onError,
                                windowId,
                                liveViewUrl,
                            });
                        }
                        else {
                            // By default, log the error and continue
                            const message = `Error for URL ${urlData.url}: ${this.formatError(error)}`;
                            this.client.error(message);
                        }
                    }
                    finally {
                        if (windowId) {
                            yield this.safelyTerminateWindow(windowId);
                        }
                    }
                }))();
                yield this.activePromisesMutex.runExclusive(() => {
                    this.activePromises.push(promise);
                });
                // Remove the promise from the active list when it resolves
                promise.finally(() => __awaiter(this, void 0, void 0, function* () {
                    yield this.activePromisesMutex.runExclusive(() => {
                        const index = this.activePromises.indexOf(promise);
                        if (index > -1) {
                            this.activePromises.splice(index, 1);
                        }
                    });
                }));
            }
            // Wait for all processes to complete
            yield Promise.allSettled(this.activePromises);
            // Remove the halt listener
            this.runEmitter.removeListener('halt', this.handleHaltEvent);
            return results;
        });
    }
    handleErrorWithCallback(_a) {
        return __awaiter(this, arguments, void 0, function* ({ originalError, url, windowId, liveViewUrl, callback, }) {
            // Catch any errors in the onError callback to avoid halting the entire process
            try {
                yield callback({
                    error: this.formatError(originalError),
                    operationUrls: [url],
                    sessionId: this.sessionId,
                    windowId,
                    liveViewUrl,
                });
            }
            catch (newError) {
                this.client.error(`Error in onError callback: ${this.formatError(newError)}. Original error: ${this.formatError(originalError)}`);
            }
        });
    }
    safelyTerminateWindow(windowId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.client.windows.close(this.sessionId, windowId);
            }
            catch (error) {
                this.client.error(`Error closing window ${windowId}: ${this.formatError(error)}`);
            }
        });
    }
    formatError(error) {
        return error instanceof Error ? error.message : String(error);
    }
    handleErrorAndWarningResponses({ warnings, errors, sessionId, url, operation, }) {
        if (!warnings && !errors)
            return;
        const details = {
            sessionId,
            url,
        };
        if (warnings) {
            details.warnings = warnings;
            this.client.warn(`Received warnings for ${operation}: ${JSON.stringify(details)}`);
        }
        if (errors) {
            details.errors = errors;
            this.client.error(`Received errors for ${operation}: ${JSON.stringify(details)}`);
        }
    }
}
exports.WindowQueue = WindowQueue;
