"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.batchOperate = void 0;
const eventemitter3_1 = require("eventemitter3");
const SessionQueue_1 = require("./SessionQueue");
const helpers_1 = require("./helpers");
const DEFAULT_MAX_WINDOWS_PER_SESSION = 1;
const DEFAULT_MAX_CONCURRENT_SESSIONS = 30;
const batchOperate = (urls, operation, // operation to invoke on each url
client, config) => __awaiter(void 0, void 0, void 0, function* () {
    // Validate the urls before proceeding
    if (!Array.isArray(urls)) {
        throw new Error('Please provide a valid list of urls');
    }
    for (const url of urls) {
        if (!url || typeof url !== 'object' || !('url' in url)) {
            throw new Error('Please provide a valid list of urls');
        }
    }
    const runEmitter = new eventemitter3_1.EventEmitter();
    const { maxConcurrentSessions = DEFAULT_MAX_CONCURRENT_SESSIONS, maxWindowsPerSession = DEFAULT_MAX_WINDOWS_PER_SESSION, sessionConfig, onError, } = config !== null && config !== void 0 ? config : {};
    // Split the urls into batches
    const initialBatches = (0, helpers_1.distributeUrlsToBatches)(urls, maxConcurrentSessions);
    const sessionQueue = new SessionQueue_1.SessionQueue({
        maxConcurrentSessions,
        runEmitter,
        maxWindowsPerSession,
        initialBatches,
        operation,
        client,
        sessionConfig,
        onError,
    });
    runEmitter.on('addUrls', (additionalUrls) => {
        sessionQueue.addUrlsToBatchQueue(additionalUrls);
    });
    yield sessionQueue.processInitialBatches();
    return yield sessionQueue.waitForProcessingToComplete();
});
exports.batchOperate = batchOperate;
