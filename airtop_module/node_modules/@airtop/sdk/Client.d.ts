/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "./environments";
import * as core from "./core";
import { Windows } from "./api/resources/windows/client/Client";
import { Automations } from "./api/resources/automations/client/Client";
import { Files } from "./api/resources/files/client/Client";
import { Profiles } from "./api/resources/profiles/client/Client";
import { Requests } from "./api/resources/requests/client/Client";
import { Sessions } from "./api/resources/sessions/client/Client";
export declare namespace AirtopClient {
    interface Options {
        environment?: core.Supplier<environments.AirtopEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class AirtopClient {
    protected readonly _options: AirtopClient.Options;
    protected _windows: Windows | undefined;
    protected _automations: Automations | undefined;
    protected _files: Files | undefined;
    protected _profiles: Profiles | undefined;
    protected _requests: Requests | undefined;
    protected _sessions: Sessions | undefined;
    constructor(_options: AirtopClient.Options);
    get windows(): Windows;
    get automations(): Automations;
    get files(): Files;
    get profiles(): Profiles;
    get requests(): Requests;
    get sessions(): Sessions;
}
