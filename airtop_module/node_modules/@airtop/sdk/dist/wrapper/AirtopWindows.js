"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AirtopWindows = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const Client_1 = require("../api/resources/windows/client/Client");
const core = __importStar(require("../core"));
const utils_1 = require("../utils");
class AirtopWindows extends Client_1.Windows {
    constructor(_client, _options, apiKeySupplier) {
        super(_options);
        this._client = _client;
        this._options = _options;
        this.apiKeySupplier = apiKeySupplier;
        this.mainClient = _client;
    }
    /**
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window to target with an Airtop AI prompt.
     * @param {Airtop.SessionContentPromptHandlerRequestBody} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @deprecated Use pageQuery instead
     * @example
     *     await client.windows.promptContent("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430", {
     *         prompt: "What is the main idea of this page?"
     *     })
     */
    promptContent(sessionId, windowId, request, requestOptions) {
        const _super = Object.create(null, {
            promptContent: { get: () => super.promptContent }
        });
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            return _super.promptContent.call(this, sessionId, windowId, Object.assign(Object.assign({}, request), { configuration: Object.assign(Object.assign({}, request.configuration), { outputSchema: typeof ((_a = request.configuration) === null || _a === void 0 ? void 0 : _a.outputSchema) === 'object'
                        ? JSON.stringify(request.configuration.outputSchema)
                        : (_b = request.configuration) === null || _b === void 0 ? void 0 : _b.outputSchema }) }), Object.assign(Object.assign({ timeoutInSeconds: 600 }, requestOptions), { maxRetries: 0 }));
        });
    }
    /**
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window to target with an Airtop AI prompt.
     * @param {Airtop.SessionPageQueryHandlerRequestBody} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.pageQuery("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430", {
     *         prompt: "What is the main idea of this page?"
     *     })
     */
    pageQuery(sessionId, windowId, request, requestOptions) {
        const _super = Object.create(null, {
            pageQuery: { get: () => super.pageQuery }
        });
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            return _super.pageQuery.call(this, sessionId, windowId, Object.assign(Object.assign({}, request), { configuration: Object.assign(Object.assign({}, request.configuration), { outputSchema: typeof ((_a = request.configuration) === null || _a === void 0 ? void 0 : _a.outputSchema) === 'object'
                        ? JSON.stringify(request.configuration.outputSchema)
                        : (_b = request.configuration) === null || _b === void 0 ? void 0 : _b.outputSchema }) }), Object.assign(Object.assign({ timeoutInSeconds: 600 }, requestOptions), { maxRetries: 0 }));
        });
    }
    /**
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window to scrape.
     * @param {Airtop.ScrapeContentRequest} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.scrapeContent("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430")
     */
    scrapeContent(sessionId, windowId, request, requestOptions) {
        return super.scrapeContent(sessionId, windowId, request, Object.assign({ timeoutInSeconds: 600 }, requestOptions));
    }
    /**
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window to summarize.
     * @param {Airtop.SessionSummaryHandlerRequestBody} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.summarizeContent("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430")
     */
    summarizeContent(sessionId, windowId, request, requestOptions) {
        var _a, _b, _c;
        return super.summarizeContent(sessionId, windowId, Object.assign(Object.assign({}, request), { configuration: Object.assign(Object.assign({}, request === null || request === void 0 ? void 0 : request.configuration), { outputSchema: typeof ((_a = request === null || request === void 0 ? void 0 : request.configuration) === null || _a === void 0 ? void 0 : _a.outputSchema) === 'object'
                    ? JSON.stringify((_b = request === null || request === void 0 ? void 0 : request.configuration) === null || _b === void 0 ? void 0 : _b.outputSchema)
                    : (_c = request === null || request === void 0 ? void 0 : request.configuration) === null || _c === void 0 ? void 0 : _c.outputSchema }) }), Object.assign(Object.assign({ timeoutInSeconds: 600 }, requestOptions), { maxRetries: 0 }));
    }
    getWindowInfoForPuppeteerPage(session, page, request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const targetId = yield page.mainFrame()._id;
            return yield this.getWindowInfo(session.id, targetId, request, requestOptions);
        });
    }
    getWindowInfoForPlaywrightPage(session, page, request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            // Retrieve target information
            const cdpSession = yield page.context().newCDPSession(page);
            const { targetInfo } = yield cdpSession.send('Target.getTargetInfo');
            const targetId = targetInfo.targetId;
            if (!targetId) {
                throw new Error('TargetId not found');
            }
            return yield this.getWindowInfo(session.id, targetId, request, requestOptions);
        });
    }
    /**
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.SessionClickHandlerRequestBody} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.click("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430", {
     *         elementDescription: "The login button"
     *     })
     */
    click(sessionId, windowId, request, requestOptions) {
        const _super = Object.create(null, {
            click: { get: () => super.click }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.click.call(this, sessionId, windowId, request, Object.assign(Object.assign({ timeoutInSeconds: 600 }, requestOptions), { maxRetries: 0 }));
        });
    }
    /**
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.SessionHoverHandlerRequestBody} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.hover("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430")
     */
    hover(sessionId, windowId, request, requestOptions) {
        const _super = Object.create(null, {
            hover: { get: () => super.hover }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.hover.call(this, sessionId, windowId, request, Object.assign(Object.assign({ timeoutInSeconds: 600 }, requestOptions), { maxRetries: 0 }));
        });
    }
    /**
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.SessionTypeHandlerRequestBody} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.type("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430", {
     *         text: "Example text"
     *     })
     */
    type(sessionId, windowId, request, requestOptions) {
        const _super = Object.create(null, {
            type: { get: () => super.type }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.type.call(this, sessionId, windowId, request, Object.assign(Object.assign({ timeoutInSeconds: 600 }, requestOptions), { maxRetries: 0 }));
        });
    }
    /**
     * Submit a prompt that queries the content of a specific browser window and paginates through pages to return a list of results.
     *
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.SessionPaginatedExtractionHandlerRequestBody} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.paginatedExtraction("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430")
     */
    paginatedExtraction(sessionId, windowId, request, requestOptions) {
        const _super = Object.create(null, {
            paginatedExtraction: { get: () => super.paginatedExtraction }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.paginatedExtraction.call(this, sessionId, windowId, request, Object.assign(Object.assign({ timeoutInSeconds: 600 }, requestOptions), { maxRetries: 0 }));
        });
    }
    /**
     * Execute a scroll interaction in a specific browser window
     *
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.SessionScrollHandlerRequestBody} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.scroll("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430")
     */
    scroll(sessionId_1, windowId_1) {
        const _super = Object.create(null, {
            scroll: { get: () => super.scroll }
        });
        return __awaiter(this, arguments, void 0, function* (sessionId, windowId, request = {}, requestOptions) {
            return _super.scroll.call(this, sessionId, windowId, request, Object.assign(Object.assign({ timeoutInSeconds: 600 }, requestOptions), { maxRetries: 0 }));
        });
    }
    /**
     * Fill a form of a browser window synchronously using a form-filler automation
     *
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.FillFormRequest} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.fillForm("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430", {
     *         automationId: "automationId"
     *     })
     */
    fillForm(sessionId, windowId, request, requestOptions) {
        const _super = Object.create(null, {
            fillForm: { get: () => super.fillForm }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.fillForm.call(this, sessionId, windowId, request, Object.assign(Object.assign({ timeoutInSeconds: 600 }, requestOptions), { maxRetries: 0 }));
        });
    }
    /**
     * Create a form-filler automation synchronously for the form loaded in the browser window
     *
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.CreateFormFillerRequest} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.createFormFiller("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430")
     */
    createFormFiller(sessionId_1, windowId_1) {
        const _super = Object.create(null, {
            createFormFiller: { get: () => super.createFormFiller }
        });
        return __awaiter(this, arguments, void 0, function* (sessionId, windowId, request = {}, requestOptions) {
            return _super.createFormFiller.call(this, sessionId, windowId, request, Object.assign(Object.assign({ timeoutInSeconds: 600 }, requestOptions), { maxRetries: 0 }));
        });
    }
    /**
     * @param {string} sessionId - The session id for the window.
     * @param {string} windowId - The Airtop window id of the browser window.
     * @param {Airtop.SessionMonitorHandlerRequestBody} request
     * @param {Windows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.windows.monitor("6aac6f73-bd89-4a76-ab32-5a6c422e8b0b", "0334da2a-91b0-42c5-6156-76a5eba87430")
     */
    monitor(sessionId, windowId, request, requestOptions) {
        const _super = Object.create(null, {
            monitor: { get: () => super.monitor }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.monitor.call(this, sessionId, windowId, request, Object.assign(Object.assign({ timeoutInSeconds: 600 }, requestOptions), { maxRetries: 0 }));
        });
    }
    executeSeleniumCDPCommand(driver, session, apiKey) {
        return __awaiter(this, void 0, void 0, function* () {
            // Get the current WebDriver session ID
            const webDriverSessionId = (yield driver.getSession()).getId();
            if (!webDriverSessionId) {
                throw new Error('No WebDriver session available');
            }
            const chromedriverSessionUrl = `${session.chromedriverUrl}/session/${webDriverSessionId}/chromium/send_command_and_get_result`;
            const response = yield (0, node_fetch_1.default)(chromedriverSessionUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${apiKey}`,
                },
                body: JSON.stringify({
                    cmd: 'Target.getTargetInfo',
                    params: {},
                }),
            });
            return response.json();
        });
    }
    getWindowInfoForSeleniumDriver(session, driver, request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const apiKey = yield core.Supplier.get(this.apiKeySupplier);
            const result = yield this.executeSeleniumCDPCommand(driver, session, apiKey || '');
            const targetId = (_b = (_a = result === null || result === void 0 ? void 0 : result.value) === null || _a === void 0 ? void 0 : _a.targetInfo) === null || _b === void 0 ? void 0 : _b.targetId;
            if (!targetId) {
                throw new Error('TargetId not found');
            }
            return yield this.getWindowInfo(session.id, targetId, request, requestOptions);
        });
    }
    /**
     * Upload a file, push the file to a session, and fill a file input field in a window.
     * After this operation, the file input will be ready to be submitted.
     *
     * @param sessionId - The session id for the window.
     * @param windowId - The window id of the browser window.
     * @param {UploadAndFillFileInputConfiguration} configuration
     * @param configuration.uploadFilePath - The path to the local file to upload.
     * @param configuration.elementDescription - A natural language description of the file input to
     *   interact with (e.g. 'the file input', 'file upload selection box'). The interaction will be
     *   aborted if the target element cannot be found.
     * @see Airtop.SessionFileInputHandlerRequestBody - For additional micro-interaction configuration options.
     * @returns The file id and the ai response.
     */
    uploadFileAndSelectInput(sessionId, windowId, configuration) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, utils_1.uploadFileAndSelectInput)({ client: this.mainClient, sessionId, windowId, configuration });
        });
    }
}
exports.AirtopWindows = AirtopWindows;
