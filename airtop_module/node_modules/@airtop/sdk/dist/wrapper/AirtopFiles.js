"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AirtopFiles = void 0;
const Client_1 = require("../api/resources/files/client/Client");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const readable_stream_1 = require("readable-stream");
class AirtopFiles extends Client_1.Files {
    constructor(_options) {
        super(_options);
        this._options = _options;
    }
    /**
     * Uploads a file to Airtop by first creating a file entry and then uploading the contents
     * If @options is not provided, the fileName will be calculated from the filePath.
     * @options.fileType defaults to `customer_upload`
     *
     * @param filePath - Path to the local file to upload
     * @param options - Optional API request configuration
     * @returns The created file entry response
     *
     * @example
     *     const result = await client.files.upload("/path/to/file.pdf")
     */
    upload(filePath, options) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const fileName = (_a = options === null || options === void 0 ? void 0 : options.fileName) !== null && _a !== void 0 ? _a : path.basename(filePath);
            const fileType = (_b = options === null || options === void 0 ? void 0 : options.fileType) !== null && _b !== void 0 ? _b : 'customer_upload';
            const fileEntry = yield this.create(Object.assign(Object.assign({}, options), { fileName,
                fileType }));
            const fileContent = fs.readFileSync(filePath);
            const uploadResponse = yield (0, node_fetch_1.default)(fileEntry.data.uploadUrl, {
                method: 'PUT',
                body: fileContent,
                headers: {
                    'Content-Type': 'application/octet-stream',
                },
            });
            if (!uploadResponse.ok) {
                throw new Error(`Failed to upload file content: ${uploadResponse.statusText}`);
            }
            const updatedFileEntry = yield this.get(fileEntry.data.id);
            return updatedFileEntry;
        });
    }
    /**
     * Downloads a file from Airtop to a local path
     *
     * @param fileId - The ID of the file to download
     * @param destinationPath - Local path where the file should be saved
     * @param options - Optional API request configuration
     * @param onProgress - Optional callback to monitor download progress
     *
     * @example
     *     await client.files.download(
     *       "123e4567-e89b-12d3-a456-426614174000",
     *       "/path/to/save/file.pdf",
     *       (downloaded, total) => {
     *         const percent = Math.round((downloaded / total) * 100);
     *         console.log(`Downloaded: ${downloaded} / ${total} bytes (${percent}%)`);
     *       }
     *     )
     */
    download(fileId, destinationPath, onProgress, options) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            // Get the file entry to get the download URL
            const fileEntry = yield this.get(fileId, options);
            if (fileEntry.data.status !== 'available') {
                throw new Error(`File ${fileId} is not ready for download`);
            }
            // Download the file content
            const downloadResponse = yield (0, node_fetch_1.default)(fileEntry.data.downloadUrl);
            if (!downloadResponse.ok) {
                throw new Error(`Failed to download file: ${downloadResponse.statusText}`);
            }
            const totalBytes = Number.parseInt((_a = downloadResponse.headers.get('content-length')) !== null && _a !== void 0 ? _a : '0', 10);
            let downloadedBytes = 0;
            fs.mkdirSync(path.dirname(destinationPath), { recursive: true });
            const fileStream = fs.createWriteStream(destinationPath);
            yield new Promise((resolve, reject) => {
                var _a, _b;
                if (onProgress && downloadResponse.body) {
                    // Create a transform stream to track progress
                    const progressStream = new readable_stream_1.Transform({
                        transform(chunk, encoding, callback) {
                            downloadedBytes += chunk.length;
                            onProgress(downloadedBytes, totalBytes);
                            callback(null, chunk);
                        },
                    });
                    downloadResponse.body.pipe(progressStream).pipe(fileStream);
                    progressStream.on('error', reject);
                }
                else {
                    // If no progress callback, pipe directly
                    (_a = downloadResponse.body) === null || _a === void 0 ? void 0 : _a.pipe(fileStream);
                }
                (_b = downloadResponse.body) === null || _b === void 0 ? void 0 : _b.on('error', reject);
                fileStream.on('finish', resolve);
            });
        });
    }
    /**
     * Waits for a file to become available for download.
     *
     * @param fileId - The ID of the file to wait for
     * @param options - Optional request configuration including timeout
     * @returns The file entry once it becomes available
     * @throws Error if the file doesn't become available within the timeout period
     *
     * @example
     *     const fileEntry = await client.files.waitForDownloadAvailable("123e4567-e89b-12d3-a456-426614174000")
     */
    waitForDownloadAvailable(fileId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const timeoutSeconds = (options === null || options === void 0 ? void 0 : options.timeoutInSeconds) || 120;
            const intervalMs = 5000; // 5 seconds
            const startTime = Date.now();
            while (Date.now() - startTime < timeoutSeconds * 1000) {
                const fileEntry = yield this.get(fileId, options);
                // Check if the file has a valid download URL and size, which indicates it's available
                if (fileEntry.data.downloadUrl && fileEntry.data.fileBytes > 0) {
                    return fileEntry;
                }
                // Wait before checking again
                yield new Promise((resolve) => setTimeout(resolve, intervalMs));
            }
            throw new Error(`Timeout waiting for file ${fileId} to become available`);
        });
    }
}
exports.AirtopFiles = AirtopFiles;
