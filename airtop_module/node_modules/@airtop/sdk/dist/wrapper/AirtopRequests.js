"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AirtopRequests = void 0;
const Client_1 = require("../api/resources/requests/client/Client");
class AirtopRequests extends Client_1.Requests {
    constructor(_options) {
        super(_options);
        this._options = _options;
    }
    /**
     * Waits until a request is complete or times out
     *
     * @param requestId - The ID of the request to wait for.
     * @param timeoutSeconds - Maximum time to wait in seconds.
     * @param intervalSeconds - Polling interval in seconds.
     * @param requestOptions - Request-specific configuration.
     *
     * @example
     *     const result = await client.requests.waitForRequestCompletion("123e4567-e89b-12d3-a456-426614174000", 300)
     */
    waitForRequestCompletion(requestId_1) {
        return __awaiter(this, arguments, void 0, function* (requestId, timeoutSeconds = 300, intervalSeconds = 2, requestOptions) {
            if (timeoutSeconds <= 0 || intervalSeconds <= 0) {
                throw new Error('Timeout and interval must be positive values in seconds');
            }
            const startTime = Date.now();
            const timeoutMs = timeoutSeconds * 1000;
            while (Date.now() - startTime < timeoutMs) {
                const response = yield this.getRequestStatus(requestId, requestOptions);
                if (response.status === 'completed' || response.status === 'error') {
                    return response;
                }
                yield new Promise((resolve) => setTimeout(resolve, intervalSeconds * 1000));
            }
            throw new Error(`Waiting for request timed out: ${requestId}`);
        });
    }
}
exports.AirtopRequests = AirtopRequests;
