/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Airtop from "../../../index";
export declare namespace Requests {
    interface Options {
        environment?: core.Supplier<environments.AirtopEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Requests {
    protected readonly _options: Requests.Options;
    constructor(_options: Requests.Options);
    /**
     * @param {string} requestId - The ID of the request to check.
     * @param {Requests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.requests.getRequestStatus("123e4567-e89b-12d3-a456-426614174000")
     */
    getRequestStatus(requestId: string, requestOptions?: Requests.RequestOptions): Promise<Airtop.RequestStatusResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
