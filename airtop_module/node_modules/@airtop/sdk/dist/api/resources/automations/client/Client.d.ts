/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Airtop from "../../../index";
export declare namespace Automations {
    interface Options {
        environment?: core.Supplier<environments.AirtopEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Automations {
    protected readonly _options: Automations.Options;
    constructor(_options: Automations.Options);
    /**
     * List all automations for a given organization
     *
     * @param {Automations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.automations.list()
     */
    list(requestOptions?: Automations.RequestOptions): Promise<Airtop.ListAutomationsOutput>;
    /**
     * Update the description of a specific automation
     *
     * @param {Airtop.UpdateAutomationDescriptionInputBody} request
     * @param {Automations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Airtop.UnauthorizedError}
     * @throws {@link Airtop.ForbiddenError}
     * @throws {@link Airtop.NotFoundError}
     * @throws {@link Airtop.UnprocessableEntityError}
     * @throws {@link Airtop.InternalServerError}
     *
     * @example
     *     await client.automations.update({
     *         description: "description",
     *         id: "id",
     *         orgId: "orgId"
     *     })
     */
    update(request: Airtop.UpdateAutomationDescriptionInputBody, requestOptions?: Automations.RequestOptions): Promise<Airtop.AutomationOutput>;
    /**
     * Get a specific automation by ID
     *
     * @param {string} automationId - ID of the automation to retrieve
     * @param {Automations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Airtop.UnauthorizedError}
     * @throws {@link Airtop.ForbiddenError}
     * @throws {@link Airtop.NotFoundError}
     * @throws {@link Airtop.UnprocessableEntityError}
     * @throws {@link Airtop.InternalServerError}
     *
     * @example
     *     await client.automations.get("automationId")
     */
    get(automationId: string, requestOptions?: Automations.RequestOptions): Promise<Airtop.AutomationOutput>;
    /**
     * Delete a specific automation
     *
     * @param {string} automationId - ID of the automation to delete
     * @param {Automations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Airtop.UnauthorizedError}
     * @throws {@link Airtop.ForbiddenError}
     * @throws {@link Airtop.NotFoundError}
     * @throws {@link Airtop.UnprocessableEntityError}
     * @throws {@link Airtop.InternalServerError}
     *
     * @example
     *     await client.automations.delete("automationId")
     */
    delete(automationId: string, requestOptions?: Automations.RequestOptions): Promise<Airtop.DeleteAutomationOutputWrapperBody>;
    protected _getAuthorizationHeader(): Promise<string>;
}
