import type { EventEmitter } from 'eventemitter3';
import type { AirtopClient } from '../../wrapper/AirtopClient';
import type { BatchOperationError, BatchOperationInput, BatchOperationResponse, BatchOperationUrl } from './types';
export declare class WindowQueue<T> {
    private activePromises;
    private urlQueue;
    private activePromisesMutex;
    private urlQueueMutex;
    private maxWindowsPerSession;
    private runEmitter;
    private sessionId;
    private client;
    private operation;
    private onError?;
    private isHalted;
    constructor(maxWindowsPerSession: number, runEmitter: EventEmitter, sessionId: string, client: AirtopClient, operation: (input: BatchOperationInput) => Promise<BatchOperationResponse<T>>, onError?: (error: BatchOperationError) => Promise<void>, isHalted?: boolean);
    addUrlToQueue(url: BatchOperationUrl): Promise<void>;
    private handleHaltEvent;
    processInBatches(urls: BatchOperationUrl[]): Promise<T[]>;
    private handleErrorWithCallback;
    private safelyTerminateWindow;
    private formatError;
    private handleErrorAndWarningResponses;
}
