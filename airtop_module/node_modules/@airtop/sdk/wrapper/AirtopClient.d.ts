import { AirtopClient as FernClient } from '../Client';
import { type BatchOperateConfig, type BatchOperationInput, type BatchOperationResponse, type BatchOperationUrl } from '../utils';
import { AirtopSessions } from './AirtopSessions';
import { AirtopWindows } from './AirtopWindows';
import { AirtopRequests } from './AirtopRequests';
import { AirtopFiles } from './AirtopFiles';
type AugmentedOptions = FernClient.Options & {
    debug?: boolean;
};
export declare class AirtopClient {
    private _options;
    debug: boolean;
    private _client;
    private _windows;
    private _sessions;
    private _requests;
    private _files;
    constructor(_options: AugmentedOptions);
    setApiKey(apiKey: string): void;
    setEnvironment(environment: string): void;
    get sessions(): AirtopSessions;
    get windows(): AirtopWindows;
    get requests(): AirtopRequests;
    get profiles(): import("../api/resources/profiles/client/Client").Profiles;
    get automations(): import("../api/resources/automations/client/Client").Automations;
    get files(): AirtopFiles;
    log(message: string): void;
    warn(message: string): void;
    error(err: any): void;
    batchOperate: <T>(urls: BatchOperationUrl[], operation: (input: BatchOperationInput) => Promise<BatchOperationResponse<T>>, config?: BatchOperateConfig) => Promise<T[]>;
}
export {};
