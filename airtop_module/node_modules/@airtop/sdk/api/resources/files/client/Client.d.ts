/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Airtop from "../../../index";
export declare namespace Files {
    interface Options {
        environment?: core.Supplier<environments.AirtopEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Files {
    protected readonly _options: Files.Options;
    constructor(_options: Files.Options);
    /**
     * Get a list of files filtered by session ID
     *
     * @param {Airtop.FilesListRequest} request
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.files.list({
     *         offset: 1,
     *         limit: 10
     *     })
     */
    list(request?: Airtop.FilesListRequest, requestOptions?: Files.RequestOptions): Promise<Airtop.FilesResponse>;
    /**
     * @param {Airtop.CreateFileRestInputV1} request
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.files.create({
     *         fileName: "fileName"
     *     })
     */
    create(request: Airtop.CreateFileRestInputV1, requestOptions?: Files.RequestOptions): Promise<Airtop.EnvelopeCreateFileV1EnvelopeDefaultMeta>;
    /**
     * @param {string} id - ID of the file
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.files.get("id")
     */
    get(id: string, requestOptions?: Files.RequestOptions): Promise<Airtop.EnvelopeGetFileV1EnvelopeDefaultMeta>;
    /**
     * @param {string} id - ID of the file
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.files.delete("id")
     */
    delete(id: string, requestOptions?: Files.RequestOptions): Promise<void>;
    /**
     * Push a file to one or more sessions, making it available for the sessions to use
     *
     * @param {string} id - ID of the file
     * @param {Airtop.PushFileBodyV1} request
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.files.push("id")
     */
    push(id: string, request?: Airtop.PushFileBodyV1, requestOptions?: Files.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string>;
}
